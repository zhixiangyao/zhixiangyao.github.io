import{_ as o,c as a,a6 as s,o as t}from"./chunks/framework.BrYZ9O4n.js";const S=JSON.parse('{"title":"local 和 session storage","description":"","frontmatter":{},"headers":[],"relativePath":"notes/javascript/local-and-session-storage.md","filePath":"notes/javascript/local-and-session-storage.md","lastUpdated":1690783295000}'),l={name:"notes/javascript/local-and-session-storage.md"};function r(c,e,d,i,n,g){return t(),a("div",null,e[0]||(e[0]=[s('<h1 id="local-和-session-storage" tabindex="-1">local 和 session storage <a class="header-anchor" href="#local-和-session-storage" aria-label="Permalink to &quot;local 和 session storage&quot;">​</a></h1><p><code>localStorage</code> 和 <code>sessionStorage</code> 都是 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML" target="_blank" rel="noreferrer">HTML5</a> 提供的 Web 存储机制，用于在浏览器中存储数据。它们之间的主要区别在于数据的 <strong>生命周期</strong> 和 <strong>作用域</strong>。</p><h2 id="生命周期" tabindex="-1">生命周期: <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期:&quot;">​</a></h2><ul><li>localStorage: 存储在 <code>localStorage</code> 中的数据没有过期时间，除非手动删除或通过代码清除。这意味着即使关闭浏览器，数据仍然会保留。</li><li>sessionStorage: 存储在 <code>sessionStorage</code> 中的数据只在当前会话期间有效。当用户关闭浏览器窗口或标签页时，数据将被清除。</li></ul><h2 id="作用域" tabindex="-1">作用域: <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域:&quot;">​</a></h2><ul><li>localStorage: 存储在 <code>localStorage</code> 中的数据在同一域名下的所有页面中都是共享的。这意味着在同一域名下的不同页面之间可以共享数据。</li><li>sessionStorage: 存储在 <code>sessionStorage</code> 中的数据只在同一浏览器窗口或标签页中共享。这意味着在不同的浏览器窗口或标签页之间无法共享数据。</li></ul><h2 id="容量限制" tabindex="-1">容量限制: <a class="header-anchor" href="#容量限制" aria-label="Permalink to &quot;容量限制:&quot;">​</a></h2><ul><li>localStorage: 一般来说，浏览器对 <code>localStorage</code> 的容量限制在 5MB 左右。但是不同浏览器可能会有所不同。</li><li>sessionStorage: 与 <code>localStorage</code> 相同，浏览器对 <code>sessionStorage</code> 的容量限制也在 5MB 左右。</li></ul><h2 id="使用方式" tabindex="-1">使用方式: <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式:&quot;">​</a></h2><ul><li>localStorage: 可以通过<code>localStorage.setItem(key, value)</code>将数据存储到 <code>localStorage</code> 中，通过<code>localStorage.getItem(key)</code>获取数据，通过<code>localStorage.removeItem(key)</code>删除数据。</li><li>sessionStorage: 可以通过<code>sessionStorage.setItem(key, value)</code>将数据存储到 <code>sessionStorage</code> 中，通过<code>sessionStorage.getItem(key)</code>获取数据，通过<code>sessionStorage.removeItem(key)</code>删除数据。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>localStorage</code> 和 <code>sessionStorage</code> 都是在浏览器中存储数据的机制，但它们在数据的生命周期和作用域上有所不同。</p><p><code>localStorage</code> 的数据在浏览器关闭后仍然保留，可以在同一域名下的不同页面之间共享；而 <code>sessionStorage</code> 的数据只在当前会话期间有效，只能在同一浏览器窗口或标签页中共享。另外，它们的容量限制大致相同，都在 5MB 左右。</p>',13)]))}const u=o(l,[["render",r]]);export{S as __pageData,u as default};
