import{_ as e,c as o,o as a,a8 as c}from"./chunks/framework.DoWdgR5T.js";const m=JSON.parse('{"title":"什么是 URL、 URI 和 URN ?","description":"","frontmatter":{},"headers":[],"relativePath":"notes/other/url-urn-uri.md","filePath":"notes/other/url-urn-uri.md","lastUpdated":1718691705000}'),d={name:"notes/other/url-urn-uri.md"},s=c('<h1 id="什么是-url、-uri-和-urn" tabindex="-1">什么是 <code>URL</code>、 <code>URI</code> 和 <code>URN</code> ? <a class="header-anchor" href="#什么是-url、-uri-和-urn" aria-label="Permalink to &quot;什么是 `URL`、 `URI` 和 `URN` ?&quot;">​</a></h1><p><code>URL</code>、<code>URI</code> 和 <code>URN</code> 都是用于标识资源的术语，但它们有不同的定义和用途。以下是每个术语的详细解释：</p><h3 id="url-uniform-resource-locator" tabindex="-1"><code>URL</code> (Uniform Resource Locator) <a class="header-anchor" href="#url-uniform-resource-locator" aria-label="Permalink to &quot;`URL` (Uniform Resource Locator)&quot;">​</a></h3><p><code>URL</code> 是统一资源定位符，用于指定资源在互联网上的位置。它包含了资源的位置和访问资源的方法（如 HTTP、HTTPS、FTP 等）。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://www.example.com/index.html</span></span></code></pre></div><p>在这个例子中：</p><ul><li><code>https</code> 是访问资源的协议</li><li><code>www.example.com</code> 是资源所在的主机名</li><li><code>/index.html</code> 是资源在主机上的路径</li></ul><h3 id="uri-uniform-resource-identifier" tabindex="-1"><code>URI</code> (Uniform Resource Identifier) <a class="header-anchor" href="#uri-uniform-resource-identifier" aria-label="Permalink to &quot;`URI` (Uniform Resource Identifier)&quot;">​</a></h3><p><code>URI</code> 是统一资源标识符，是一种用于标识资源的字符串。<code>URI</code> 可以分为两种类型：<code>URL</code> 和 <code>URN</code>。换句话说，<code>URL</code> 是 <code>URI</code> 的一种特定类型。<code>URI</code> 可以表示为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>scheme:[//authority]path[?query][#fragment]</span></span></code></pre></div><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://www.example.com/index.html</span></span>\n<span class="line"><span>urn:isbn:0451450523</span></span></code></pre></div><p>在这个例子中，第一个是 <code>URL</code>，第二个是 <code>URN</code>。</p><h3 id="urn-uniform-resource-name" tabindex="-1"><code>URN</code> (Uniform Resource Name) <a class="header-anchor" href="#urn-uniform-resource-name" aria-label="Permalink to &quot;`URN` (Uniform Resource Name)&quot;">​</a></h3><p><code>URN</code> 是统一资源名称，用于通过名字而不是位置来标识资源。它不指定资源的位置，而是一个永久的标识符。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>urn:isbn:0451450523</span></span></code></pre></div><p>这个 <code>URN</code> 标识的是某本书的 ISBN 编号，无论这本书在哪里出版或被存储，其 <code>URN</code> 都是唯一且不变的。</p><h3 id="关系和区别" tabindex="-1">关系和区别 <a class="header-anchor" href="#关系和区别" aria-label="Permalink to &quot;关系和区别&quot;">​</a></h3><ul><li><strong><code>URI</code></strong> 是一个更广泛的概念，可以是 <code>URL</code> 或 <code>URN</code>。</li><li><strong><code>URL</code></strong> 是 <code>URI</code> 的一个子集，用于通过位置和访问方法来标识资源。</li><li><strong><code>URN</code></strong> 是 <code>URI</code> 的另一个子集，用于通过名称来唯一标识资源，不关心资源的位置。</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><strong><code>URI</code></strong>: 统一资源标识符，泛指所有用于标识资源的字符串。</li><li><strong><code>URL</code></strong>: 统一资源定位符，<code>URI</code> 的一种，通过位置和访问方法标识资源。</li><li><strong><code>URN</code></strong>: 统一资源名称，<code>URI</code> 的另一种，通过名称唯一标识资源。</li></ul><p>了解这些术语有助于更好地理解和使用网络资源及其定位和标识方式。</p>',22),t=[s];function i(r,n,l,p,u,h){return a(),o("div",null,t)}const R=e(d,[["render",i]]);export{m as __pageData,R as default};
