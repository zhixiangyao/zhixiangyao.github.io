import{_ as e,c as a,o as t,a as r}from"./app.c8900b71.js";const p=JSON.parse('{"title":"Vue2-生命周期基础知识","description":"","frontmatter":{},"headers":[{"level":2,"title":"基础知识","slug":"基础知识","link":"#基础知识","children":[{"level":3,"title":"生命周期图","slug":"生命周期图","link":"#生命周期图","children":[]},{"level":3,"title":"1. beforeCreate","slug":"_1-beforecreate","link":"#_1-beforecreate","children":[]},{"level":3,"title":"2. created","slug":"_2-created","link":"#_2-created","children":[]},{"level":3,"title":"3. beforeMount","slug":"_3-beforemount","link":"#_3-beforemount","children":[]},{"level":3,"title":"4. mounted","slug":"_4-mounted","link":"#_4-mounted","children":[]},{"level":3,"title":"5. beforeUpdate","slug":"_5-beforeupdate","link":"#_5-beforeupdate","children":[]},{"level":3,"title":"6. updated","slug":"_6-updated","link":"#_6-updated","children":[]},{"level":3,"title":"7. beforeDestroy","slug":"_7-beforedestroy","link":"#_7-beforedestroy","children":[]},{"level":3,"title":"8. destroyed","slug":"_8-destroyed","link":"#_8-destroyed","children":[]}]}],"relativePath":"notes/vue/vue2-lifecycle-basics.md","lastUpdated":1671675831000}'),d={name:"notes/vue/vue2-lifecycle-basics.md"},o=r('<h1 id="vue2-生命周期基础知识" tabindex="-1">Vue2-生命周期基础知识 <a class="header-anchor" href="#vue2-生命周期基础知识" aria-hidden="true">#</a></h1><h2 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">Vue2 生命周期的八个阶段:</p><ul><li>beforeCreate</li><li>created</li><li>beforeMount</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>beforeDestroy</li><li>destroyed</li></ul></div><h3 id="生命周期图" tabindex="-1"><a href="https://v2.vuejs.org/v2/guide/instance.html#Lifecycle-Diagram" target="_blank" rel="noreferrer">生命周期图</a> <a class="header-anchor" href="#生命周期图" aria-hidden="true">#</a></h3><p>下图展示了实例的生命周期。</p><img src="https://v2.vuejs.org/images/lifecycle.png" width="100%"><h3 id="_1-beforecreate" tabindex="-1">1. beforeCreate <a class="header-anchor" href="#_1-beforecreate" aria-hidden="true">#</a></h3><p>这个 hook 是是 new Vue()之后触发的第一个钩子，在当前阶段中 data、methods、computed 以及 watch 上的数据和方法均不能被访问。</p><h3 id="_2-created" tabindex="-1">2. created <a class="header-anchor" href="#_2-created" aria-hidden="true">#</a></h3><p>这个 hook 是在实例创建完成后发生，当前阶段已经完成了数据观测，也就是可以使用数据，更改数据，在这里更改数据不会触发 updated 函数。可以做一些初始数据的获取，在当前阶段无法与 Dom 进行交互，如果你非要想，可以通过 vm.$nextTick 来访问 Dom。</p><h3 id="_3-beforemount" tabindex="-1">3. beforeMount <a class="header-anchor" href="#_3-beforemount" aria-hidden="true">#</a></h3><p>这个 hook 是发生在挂载之前，在这之前 template 模板已导入渲染函数编译。而当前阶段虚拟 Dom 已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发 updated。</p><h3 id="_4-mounted" tabindex="-1">4. mounted <a class="header-anchor" href="#_4-mounted" aria-hidden="true">#</a></h3><p>这个 hook 是在挂载完成后发生，在当前阶段，真实的 Dom 挂载完毕，数据完成双向绑定，可以访问到 Dom 节点，使用$refs 属性对 Dom 进行操作。也可以向后台发送请求，拿到返回数据。</p><h3 id="_5-beforeupdate" tabindex="-1">5. beforeUpdate <a class="header-anchor" href="#_5-beforeupdate" aria-hidden="true">#</a></h3><p>这个 hook 是发生在更新之前，也就是响应式数据发生更新，虚拟 dom 重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染。</p><h3 id="_6-updated" tabindex="-1">6. updated <a class="header-anchor" href="#_6-updated" aria-hidden="true">#</a></h3><p>这个 hook 是发生在更新完成之后，当前阶段组件 Dom 已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新。</p><h3 id="_7-beforedestroy" tabindex="-1">7. beforeDestroy <a class="header-anchor" href="#_7-beforedestroy" aria-hidden="true">#</a></h3><p>这个 hook 是发生在实例销毁之前，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器。</p><h3 id="_8-destroyed" tabindex="-1">8. destroyed <a class="header-anchor" href="#_8-destroyed" aria-hidden="true">#</a></h3><p>这个 hook 是发生在实例销毁之后，这个时候只剩下了 dom 空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。</p>',22),i=[o];function l(h,n,s,c,u,_){return t(),a("div",null,i)}const b=e(d,[["render",l]]);export{p as __pageData,b as default};
