import{_ as a,C as p,o as l,c as o,H as e,Q as s}from"./chunks/framework.55458a4a.js";const C=JSON.parse('{"title":"instanceof 模拟","description":"","frontmatter":{},"headers":[],"relativePath":"notes/javascript/instanceof-mock.md","filePath":"notes/javascript/instanceof-mock.md","lastUpdated":1693386365000}'),t={name:"notes/javascript/instanceof-mock.md"},c=s(`<h1 id="instanceof-模拟" tabindex="-1">instanceof 模拟 <a class="header-anchor" href="#instanceof-模拟" aria-label="Permalink to &quot;instanceof 模拟&quot;">​</a></h1><p>可以使用 <code>Object.getPrototypeOf</code> 查找原型，来比对 A 是否 <code>instanceof</code> B。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-GVFUQ" id="tab-bwsyPeO" checked="checked"><label for="tab-bwsyPeO">instanceofMock</label><input type="radio" name="group-GVFUQ" id="tab-EZi-eaz"><label for="tab-EZi-eaz">test</label></div><div class="blocks"><div class="language-js vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">instanceofMock</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">before</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">after</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 检查参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> before </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> before </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> after </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> before</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (current) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 一直往原型链上面找</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Object.</span><span style="color:#B392F0;">getPrototypeOf</span><span style="color:#E1E4E8;">(current) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">after</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">getPrototypeOf</span><span style="color:#E1E4E8;">(current)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">instanceofMock</span><span style="color:#24292E;">(</span><span style="color:#E36209;">before</span><span style="color:#24292E;">, </span><span style="color:#E36209;">after</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 检查参数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> before </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> before </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> after </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> before</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (current) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 一直往原型链上面找</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Object.</span><span style="color:#6F42C1;">getPrototypeOf</span><span style="color:#24292E;">(current) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">after</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">getPrototypeOf</span><span style="color:#24292E;">(current)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grandpa</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">father</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">son</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  grandpa.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  father.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">father</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">grandpa</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 重新指定 constructor</span></span>
<span class="line"><span style="color:#79B8FF;">father</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> father</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">son</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">father</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 重新指定 constructor</span></span>
<span class="line"><span style="color:#79B8FF;">son</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> son</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">son</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(sub)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">instanceofMock</span><span style="color:#E1E4E8;">(sub, son))</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">instanceofMock</span><span style="color:#E1E4E8;">(sub, father))</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">instanceofMock</span><span style="color:#E1E4E8;">(sub, grandpa))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grandpa</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">father</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">son</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  grandpa.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  father.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">father</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">grandpa</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 重新指定 constructor</span></span>
<span class="line"><span style="color:#005CC5;">father</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> father</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">son</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">father</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 重新指定 constructor</span></span>
<span class="line"><span style="color:#005CC5;">son</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> son</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">son</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(sub)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">instanceofMock</span><span style="color:#24292E;">(sub, son))</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">instanceofMock</span><span style="color:#24292E;">(sub, father))</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">instanceofMock</span><span style="color:#24292E;">(sub, grandpa))</span></span></code></pre></div></div></div><h2 id="运行结果" tabindex="-1">运行结果 <a class="header-anchor" href="#运行结果" aria-label="Permalink to &quot;运行结果&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">1 2 3</span></span>
<span class="line"><span style="color:#e1e4e8;">son { a: 1, b: 2, c: 3 }</span></span>
<span class="line"><span style="color:#e1e4e8;">true</span></span>
<span class="line"><span style="color:#e1e4e8;">true</span></span>
<span class="line"><span style="color:#e1e4e8;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1 2 3</span></span>
<span class="line"><span style="color:#24292e;">son { a: 1, b: 2, c: 3 }</span></span>
<span class="line"><span style="color:#24292e;">true</span></span>
<span class="line"><span style="color:#24292e;">true</span></span>
<span class="line"><span style="color:#24292e;">true</span></span></code></pre></div><h2 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h2><ul><li><p><code>Object.prototype.__proto__</code>：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto" target="_blank" rel="noreferrer">隐式的原型属性，已弃用</a>，要使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf" target="_blank" rel="noreferrer"><code>Object.getPrototypeOf(XX)</code></a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf" target="_blank" rel="noreferrer"><code>Reflect.getPrototypeOf(XXX)</code></a> 来获取。</p></li><li><p><code>Object.prototype</code>：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes" target="_blank" rel="noreferrer">显式的原型属性</a>，直接 <code>XX.prototype</code></p></li></ul><p>其实 <code>instanceof</code> 主要的实现原理是 <code>before</code> 的 <code>__proto__</code> 在 <code>after</code> 的原型链上即可。</p><p>所以 <code>instanceof</code> 在查找的过程中会遍历 <code>before</code> 的原型链，直到找到和 <code>after</code> 的 <code>prototype</code> 相等，会返回 <code>true</code>，如果查找失败，则会返回 <code>false</code>。</p><p>下面是几个有趣的例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Object </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Function </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Function </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Foo </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Foo </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Foo </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Object </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Function </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Function </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Foo </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Foo </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Foo </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>要想全部理解 <code>instanceof</code> 的原理，除了刚刚提到的实现原理，还需要知道 <code>JavaScript</code> 的原型继承原理。</p><p><a href="http://mollypages.org/tutorials/js.mp" target="_blank" rel="noreferrer">JavaScript Object Layout - Hursh Jain/mollypages.org</a></p>`,13),r=s(`<p>根据上面的原型图可知：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-XOiLA" id="tab-uQRYiG2" checked="checked"><label for="tab-uQRYiG2">Object instanceof Object</label><input type="radio" name="group-XOiLA" id="tab-Ai9tb88"><label for="tab-Ai9tb88">Foo instanceof Foo</label><input type="radio" name="group-XOiLA" id="tab-_-BO8RL"><label for="tab-_-BO8RL">Foo instanceof Object</label><input type="radio" name="group-XOiLA" id="tab-sMb46co"><label for="tab-sMb46co">Foo instanceof Function</label></div><div class="blocks"><div class="language-js vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Function.prototype</span></span>
<span class="line"><span style="color:#E1E4E8;">after </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第一次判断</span></span>
<span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> after</span></span>
<span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Object.prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第二次判断</span></span>
<span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> after</span></span>
<span class="line"><span style="color:#6A737D;">// 返回 true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Function.prototype</span></span>
<span class="line"><span style="color:#24292E;">after </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第一次判断</span></span>
<span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> after</span></span>
<span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Object.prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第二次判断</span></span>
<span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> after</span></span>
<span class="line"><span style="color:#6A737D;">// 返回 true</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> before </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Foo</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> after </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Foo.__proto </span><span style="color:#6A737D;">// Function.prototype</span></span>
<span class="line"><span style="color:#E1E4E8;">after </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Foo</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第一次判断</span></span>
<span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> after</span></span>
<span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Object.prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第二次判断</span></span>
<span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> after</span></span>
<span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第三次判断</span></span>
<span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#6A737D;">// 返回 false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> before </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Foo</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> after </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Foo.__proto </span><span style="color:#6A737D;">// Function.prototype</span></span>
<span class="line"><span style="color:#24292E;">after </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Foo</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第一次判断</span></span>
<span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> after</span></span>
<span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Object.prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第二次判断</span></span>
<span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> after</span></span>
<span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第三次判断</span></span>
<span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#6A737D;">// 返回 false</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> before </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Foo</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> after </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Foo.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Function.prototype</span></span>
<span class="line"><span style="color:#E1E4E8;">after </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第一次判断</span></span>
<span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> after</span></span>
<span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Object.prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第二次判断</span></span>
<span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> after</span></span>
<span class="line"><span style="color:#6A737D;">// 返回 true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> before </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Foo</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> after </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Foo.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Function.prototype</span></span>
<span class="line"><span style="color:#24292E;">after </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第一次判断</span></span>
<span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> after</span></span>
<span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Object.prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第二次判断</span></span>
<span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> after</span></span>
<span class="line"><span style="color:#6A737D;">// 返回 true</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> before </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Foo</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> after </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Foo.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Function.prototype</span></span>
<span class="line"><span style="color:#E1E4E8;">after </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第一次判断</span></span>
<span class="line"><span style="color:#E1E4E8;">before </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> after</span></span>
<span class="line"><span style="color:#6A737D;">// 返回 true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> before </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Foo</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> after </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Foo.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Function.prototype</span></span>
<span class="line"><span style="color:#24292E;">after </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第一次判断</span></span>
<span class="line"><span style="color:#24292E;">before </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> after</span></span>
<span class="line"><span style="color:#6A737D;">// 返回 true</span></span></code></pre></div></div></div>`,2);function y(E,i,F,f,d,b){const n=p("ZoomImg");return l(),o("div",null,[c,e(n,{src:"/javascript_object_layout.jpg",class:"w-fill"}),r])}const A=a(t,[["render",y]]);export{C as __pageData,A as default};
