import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.14d4b9fc.js";const d=JSON.parse('{"title":"第679题-数组的度","description":"","frontmatter":{},"headers":[],"relativePath":"arithmetic/leetcode/679-degree-of-an-array.md","filePath":"arithmetic/leetcode/679-degree-of-an-array.md","lastUpdated":1693366082000}'),p={name:"arithmetic/leetcode/679-degree-of-an-array.md"},o=l(`<h1 id="第679题-数组的度" tabindex="-1">第679题-数组的度 <a class="header-anchor" href="#第679题-数组的度" aria-label="Permalink to &quot;第679题-数组的度&quot;">​</a></h1><h2 id="题目描述" tabindex="-1"><a href="https://leetcode-cn.com/problems/degree-of-an-array/" target="_blank" rel="noreferrer">题目描述</a> <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;[题目描述](https://leetcode-cn.com/problems/degree-of-an-array/)&quot;">​</a></h2><p>给定一个非空且只包含非负数的整数数组  <code>nums</code>，数组的度的定义是指数组里任一元素出现频数的最大值。</p><p>你的任务是在 <code>nums</code> 中找到与  <code>nums</code>  拥有相同大小的度的最短连续子数组，返回其长度。</p><p><strong>示例 1:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">输入：[1, 2, 2, 3, 1]</span></span>
<span class="line"><span style="color:#e1e4e8;">输出：2</span></span>
<span class="line"><span style="color:#e1e4e8;">解释：</span></span>
<span class="line"><span style="color:#e1e4e8;">输入数组的度是2，因为元素1和2的出现频数最大，均为2.</span></span>
<span class="line"><span style="color:#e1e4e8;">连续子数组里面拥有相同度的有如下所示:</span></span>
<span class="line"><span style="color:#e1e4e8;">[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]</span></span>
<span class="line"><span style="color:#e1e4e8;">最短连续子数组[2, 2]的长度为2，所以返回2.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">输入：[1, 2, 2, 3, 1]</span></span>
<span class="line"><span style="color:#24292e;">输出：2</span></span>
<span class="line"><span style="color:#24292e;">解释：</span></span>
<span class="line"><span style="color:#24292e;">输入数组的度是2，因为元素1和2的出现频数最大，均为2.</span></span>
<span class="line"><span style="color:#24292e;">连续子数组里面拥有相同度的有如下所示:</span></span>
<span class="line"><span style="color:#24292e;">[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]</span></span>
<span class="line"><span style="color:#24292e;">最短连续子数组[2, 2]的长度为2，所以返回2.</span></span></code></pre></div><p><strong>示例 2:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">输入：[1,2,2,3,1,4,2]</span></span>
<span class="line"><span style="color:#e1e4e8;">输出：6</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">输入：[1,2,2,3,1,4,2]</span></span>
<span class="line"><span style="color:#24292e;">输出：6</span></span></code></pre></div><p><strong>提示:</strong></p><ul><li><code>nums.length</code> 在 <code>1</code> 到 <code>50,000</code> 区间范围内。</li><li><code>nums[i]</code> 是一个在 <code>0</code> 到 <code>49,999</code> 范围内的整数。</li></ul><h2 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-label="Permalink to &quot;解题思路&quot;">​</a></h2><p><strong>题目大意:</strong> 寻找 <strong>非负数的整数数组 nums</strong> 里 <strong>出现频率最多次的元素</strong> 的 <strong>最短</strong> 长度</p><p><strong>数组的度:</strong> 数组中出现次数最多的元素的次数。</p><ul><li>例如 <strong>示例 2 [1,2,2,3,1,4,2]</strong> 中 <ul><li>value = 1 出现 <code>2</code> 次</li><li>value = 2 出现 <code>3</code> 次</li><li>value = 3 出现 <code>1</code> 次</li><li>value = 4 出现 <code>1</code> 次</li></ul></li><li>所以数组的度是 <strong>3</strong></li></ul><p><strong>本题可以按照两部分求解：</strong></p><ul><li>先求原数组的度；</li><li>再求与原数组相同度的最短子数组。</li></ul><h2 id="哈希表" tabindex="-1">哈希表 <a class="header-anchor" href="#哈希表" aria-label="Permalink to &quot;哈希表&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-NjUZg" id="tab-dGJKqkQ" checked="checked"><label for="tab-dGJKqkQ">TypeScript</label><input type="radio" name="group-NjUZg" id="tab-fl8TcYi"><label for="tab-fl8TcYi">Rust</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findShortestSubArray</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">nums</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">[])</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   *          索引    总数       范围</span></span>
<span class="line"><span style="color:#6A737D;">   * Map() { index =&gt; [count, left, right] }</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hashMap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">]&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">i</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">num</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> nums.</span><span style="color:#B392F0;">entries</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hashMap.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(num)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      hashMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(num)[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">      hashMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(num)[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      hashMap.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(num, [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, i, i])</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> maxCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> minLen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">left</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">right</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> hashMap.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> right </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (maxCount </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> count) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      maxCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> count</span></span>
<span class="line"><span style="color:#E1E4E8;">      minLen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> len</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (maxCount </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> minLen </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> len) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      minLen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> len</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> minLen</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findShortestSubArray</span><span style="color:#24292E;">(</span><span style="color:#E36209;">nums</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">[])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   *          索引    总数       范围</span></span>
<span class="line"><span style="color:#6A737D;">   * Map() { index =&gt; [count, left, right] }</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hashMap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">]&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">i</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">num</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> nums.</span><span style="color:#6F42C1;">entries</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hashMap.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(num)) {</span></span>
<span class="line"><span style="color:#24292E;">      hashMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(num)[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">      hashMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(num)[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      hashMap.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(num, [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, i, i])</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> maxCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> minLen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">count</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">left</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">right</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> hashMap.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> right </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (maxCount </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> count) {</span></span>
<span class="line"><span style="color:#24292E;">      maxCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> count</span></span>
<span class="line"><span style="color:#24292E;">      minLen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> len</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (maxCount </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> minLen </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> len) {</span></span>
<span class="line"><span style="color:#24292E;">      minLen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> len</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> minLen</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-Rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">collections</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">HashMap</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">impl</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">find_shortest_sub_array</span><span style="color:#E1E4E8;">(nums</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vec</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">&gt;) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> hash_map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HashMap</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> max_count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;">nums</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hash_map</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">entry</span><span style="color:#E1E4E8;">(nums[i])</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">or_insert</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, i, i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> [count, ini, _] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">c;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [tmp, ini, i];</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> max_count </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> tmp { max_count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tmp; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 默认让最小长度等于数组的最大长度</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> min_len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nums</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> [count, left, right] </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> hash_map</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">count </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> max_count {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> leng </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">right </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">left </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          min_len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> min_len</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(leng);</span></span>
<span class="line"><span style="color:#6A737D;">          // println!(&quot;{}&quot;, leng);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> min_len </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">collections</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">HashMap</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">impl</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find_shortest_sub_array</span><span style="color:#24292E;">(nums</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vec</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">&gt;) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> hash_map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HashMap</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> max_count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">..</span><span style="color:#24292E;">nums</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hash_map</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">entry</span><span style="color:#24292E;">(nums[i])</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">or_insert</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, i, i]);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [count, ini, _] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">c;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [tmp, ini, i];</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> max_count </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> tmp { max_count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp; }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 默认让最小长度等于数组的最大长度</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> min_len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nums</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> [count, left, right] </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> hash_map</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">count </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> max_count {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> leng </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">right </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">left </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          min_len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> min_len</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(leng);</span></span>
<span class="line"><span style="color:#6A737D;">          // println!(&quot;{}&quot;, leng);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> min_len </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></div></div>`,18),e=[o];function c(t,r,y,E,i,F){return n(),a("div",null,e)}const m=s(p,[["render",c]]);export{d as __pageData,m as default};
